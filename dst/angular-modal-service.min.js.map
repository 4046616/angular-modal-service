{"version":3,"sources":["angular-modal-service.js"],"names":["module","angular","factory","$document","$compile","$controller","$http","$rootScope","$q","$templateCache","ModalService","self","this","getTemplate","template","templateUrl","deferred","defer","resolve","get","cache","then","result","data","error","reject","promise","showModal","options","controllerName","controller","controllerAs","modalScope","$new","closeDeferred","inputs","$scope","close","delay","undefined","window","setTimeout","$destroy","modalElement","remove","modal","extend","linkFn","$element","modalController","appendElement","append","body","scope","element","find"],"mappings":"CAMC,WAEC,YAEA,IAAIA,GAASC,QAAQD,OAAO,yBAE5BA,GAAOE,QAAQ,gBAAiB,YAAa,WAAY,cAAe,QAAS,aAAc,KAAM,iBACnG,SAASC,EAAWC,EAAUC,EAAaC,EAAOC,EAAYC,EAAIC,GAKlE,QAASC,KAEP,GAAIC,GAAOC,KAKPC,EAAc,SAASC,EAAUC,GACnC,GAAIC,GAAWR,EAAGS,OAclB,OAbGH,GACDE,EAASE,QAAQJ,GACTC,EAERT,EAAMa,IAAIJ,GAAcK,MAAOX,IAC5BY,KAAK,SAASC,GACbN,EAASE,QAAQI,EAAOC,OACvB,SAASC,GACVR,EAASS,OAAOD,KAGpBR,EAASS,OAAO,kDAEXT,EAASU,QAGlBf,GAAKgB,UAAY,SAASC,GAGxB,GAAIZ,GAAWR,EAAGS,QAGdY,EAAiBD,EAAQE,UAC7B,OAAID,IAODD,EAAQG,eACTF,EAAiBA,EAAiB,OAASD,EAAQG,cAIrDlB,EAAYe,EAAQd,SAAUc,EAAQb,aACnCM,KAAK,SAASP,GAGb,GAAIkB,GAAazB,EAAW0B,OAQxBC,EAAgB1B,EAAGS,QACnBkB,GACFC,OAAQJ,EACRK,MAAO,SAASf,EAAQgB,IACTC,SAAVD,GAAiC,OAAVA,KAAgBA,EAAQ,GAClDE,OAAOC,WAAW,WAEhBP,EAAchB,QAAQI,GAGtBU,EAAWU,WACXC,EAAaC,SAKbT,EAAOE,MAAQ,KACfrB,EAAW,KACXkB,EAAgB,KAChBW,EAAQ,KACRV,EAAS,KACTQ,EAAe,KACfX,EAAa,MACZM,IAKJV,GAAQO,QAAQlC,QAAQ6C,OAAOX,EAAQP,EAAQO,OAIlD,IAAIY,GAAS3C,EAASU,GAClB6B,EAAeI,EAAOf,EAC1BG,GAAOa,SAAWL,CAGlB,IAAIM,GAAkB5C,EAAYwB,EAAgBM,EAG9CP,GAAQsB,cAEVtB,EAAQsB,cAAcC,OAAOR,GAG7BS,EAAKD,OAAOR,EAId,IAAIE,IACFf,WAAYmB,EACZI,MAAOrB,EACPsB,QAASX,EACTN,MAAOH,EAAcR,QAIvBV,GAASE,QAAQ2B,KAGlBxB,KAAK,KAAM,SAASG,GACnBR,EAASS,OAAOD,KAGbR,EAASU,UAvFdV,EAASS,OAAO,qCACTT,EAASU,UApCtB,GAAI0B,GAAOjD,EAAUoD,KAAK,OA+H1B,OAAO,IAAI7C","file":"angular-modal-service.min.js","sourcesContent":["//  angularModalService.js\n//\n//  Service for showing modal dialogs.\n\n/***** JSLint Config *****/\n/*global angular  */\n(function() {\n\n  'use strict';\n\n  var module = angular.module('angularModalService', []);\n\n  module.factory('ModalService', ['$document', '$compile', '$controller', '$http', '$rootScope', '$q', '$templateCache',\n    function($document, $compile, $controller, $http, $rootScope, $q, $templateCache) {\n\n    //  Get the body of the document, we'll add the modal to this.\n    var body = $document.find('body');\n\n    function ModalService() {\n\n      var self = this;\n\n      //  Returns a promise which gets the template, either\n      //  from the template parameter or via a request to the\n      //  template url parameter.\n      var getTemplate = function(template, templateUrl) {\n        var deferred = $q.defer();\n        if(template) {\n          deferred.resolve(template);\n        } else if(templateUrl) {\n          //  Get the template, using the $templateCache.\n          $http.get(templateUrl, {cache: $templateCache})\n            .then(function(result) {\n              deferred.resolve(result.data);\n            }, function(error) {\n              deferred.reject(error);\n            });\n        } else {\n          deferred.reject(\"No template or templateUrl has been specified.\");\n        }\n        return deferred.promise;\n      };\n\n      self.showModal = function(options) {\n\n        //  Create a deferred we'll resolve when the modal is ready.\n        var deferred = $q.defer();\n\n        //  Validate the input parameters.\n        var controllerName = options.controller;\n        if(!controllerName) {\n          deferred.reject(\"No controller has been specified.\");\n          return deferred.promise;\n        }\n\n        //  If a 'controllerAs' option has been provided, we change the controller\n        //  name to use 'as' syntax. $controller will automatically handle this.\n        if(options.controllerAs) {\n          controllerName = controllerName + \" as \" + options.controllerAs;\n        }\n\n        //  Get the actual html of the template.\n        getTemplate(options.template, options.templateUrl)\n          .then(function(template) {\n\n            //  Create a new scope for the modal.\n            var modalScope = $rootScope.$new();\n\n            //  Create the inputs object to the controller - this will include\n            //  the scope, as well as all inputs provided.\n            //  We will also create a deferred that is resolved with a provided\n            //  close function. The controller can then call 'close(result)'.\n            //  The controller can also provide a delay for closing - this is\n            //  helpful if there are closing animations which must finish first.\n            var closeDeferred = $q.defer();\n            var inputs = {\n              $scope: modalScope,\n              close: function(result, delay) {\n                if(delay === undefined || delay === null) delay = 0;\n                window.setTimeout(function() {\n                  //  Resolve the 'close' promise.\n                  closeDeferred.resolve(result);\n\n                  //  We can now clean up the scope and remove the element from the DOM.\n                  modalScope.$destroy();\n                  modalElement.remove();\n                  \n                  //  Unless we null out all of these objects we seem to suffer\n                  //  from memory leaks, if anyone can explain why then I'd \n                  //  be very interested to know.\n                  inputs.close = null;\n                  deferred = null;\n                  closeDeferred = null;\n                  modal = null;\n                  inputs = null;\n                  modalElement = null;\n                  modalScope = null;\n                }, delay);\n              }\n            };\n\n            //  If we have provided any inputs, pass them to the controller.\n            if(options.inputs) angular.extend(inputs, options.inputs);\n\n            //  Compile then link the template element, building the actual element.\n            //  Set the $element on the inputs so that it can be injected if required.\n            var linkFn = $compile(template);\n            var modalElement = linkFn(modalScope);\n            inputs.$element = modalElement;\n\n            //  Create the controller, explicitly specifying the scope to use.\n            var modalController = $controller(controllerName, inputs);\n\n            //  Finally, append the modal to the dom.\n            if (options.appendElement) {\n              // append to custom append element\n              options.appendElement.append(modalElement);\n            } else {\n              // append to body when no custom append element is specified\n              body.append(modalElement);\n            }\n\n            //  We now have a modal object...\n            var modal = {\n              controller: modalController,\n              scope: modalScope,\n              element: modalElement,\n              close: closeDeferred.promise\n            };\n\n            //  ...which is passed to the caller via the promise.\n            deferred.resolve(modal);\n\n          })\n          .then(null, function(error) { // 'catch' doesn't work in IE8.\n            deferred.reject(error);\n          });\n\n        return deferred.promise;\n      };\n\n    }\n\n    return new ModalService();\n  }]);\n\n}());\n"],"sourceRoot":"/source/"}