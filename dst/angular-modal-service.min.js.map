{"version":3,"sources":["angular-modal-service.js"],"names":["module","angular","factory","$document","$compile","$controller","$http","$rootScope","$q","$templateRequest","ModalService","self","this","getTemplate","template","templateUrl","deferred","defer","resolve","then","error","reject","promise","showModal","options","controllerName","controller","modalScope","$new","closeDeferred","inputs","$scope","close","result","delay","undefined","window","setTimeout","$destroy","modalElement","remove","modal","extend","linkFn","$element","modalController","controllerAs","appendElement","append","body","scope","element","find"],"mappings":"CAMC,WAEC,YAEA,IAAIA,GAASC,QAAQD,OAAO,yBAE5BA,GAAOE,QAAQ,gBAAiB,YAAa,WAAY,cAAe,QAAS,aAAc,KAAM,mBACnG,SAASC,EAAWC,EAAUC,EAAaC,EAAOC,EAAYC,EAAIC,GAKlE,QAASC,KAEP,GAAIC,GAAOC,KAKPC,EAAc,SAASC,EAAUC,GACnC,GAAIC,GAAWR,EAAGS,OAalB,OAZGH,GACDE,EAASE,QAAQJ,GACTC,EACRN,EAAiBM,GAAa,GAC3BI,KAAK,SAAUL,GACdE,EAASE,QAAQJ,IAChB,SAAUM,GACXJ,EAASK,OAAOD,KAGpBJ,EAASK,OAAO,kDAEXL,EAASM,QAGlBX,GAAKY,UAAY,SAASC,GAGxB,GAAIR,GAAWR,EAAGS,QAGdQ,EAAiBD,EAAQE,UAC7B,OAAID,IAMJZ,EAAYW,EAAQV,SAAUU,EAAQT,aACnCI,KAAK,SAASL,GAGb,GAAIa,GAAapB,EAAWqB,OAQxBC,EAAgBrB,EAAGS,QACnBa,GACFC,OAAQJ,EACRK,MAAO,SAASC,EAAQC,IACTC,SAAVD,GAAiC,OAAVA,KAAgBA,EAAQ,GAClDE,OAAOC,WAAW,WAEhBR,EAAcX,QAAQe,GAGtBN,EAAWW,WACXC,EAAaC,SAKbV,EAAOE,MAAQ,KACfhB,EAAW,KACXa,EAAgB,KAChBY,EAAQ,KACRX,EAAS,KACTS,EAAe,KACfZ,EAAa,MACZO,IAKJV,GAAQM,QAAQ7B,QAAQyC,OAAOZ,EAAQN,EAAQM,OAIlD,IAAIa,GAASvC,EAASU,GAClByB,EAAeI,EAAOhB,EAC1BG,GAAOc,SAAWL,CAGlB,IAAIM,GAAkBxC,EAAYmB,EAAQE,WAAYI,EAEnDN,GAAQsB,eACTnB,EAAWH,EAAQsB,cAAgBD,GAGjCrB,EAAQuB,cAEVvB,EAAQuB,cAAcC,OAAOT,GAG7BU,EAAKD,OAAOT,EAId,IAAIE,IACFf,WAAYmB,EACZK,MAAOvB,EACPwB,QAASZ,EACTP,MAAOH,EAAcP,QAIvBN,GAASE,QAAQuB,KAGlBtB,KAAK,KAAM,SAASC,GACnBJ,EAASK,OAAOD,KAGbJ,EAASM,UApFdN,EAASK,OAAO,qCACTL,EAASM,UAnCtB,GAAI2B,GAAO9C,EAAUiD,KAAK,OA2H1B,OAAO,IAAI1C","file":"angular-modal-service.min.js","sourcesContent":["//  angularModalService.js\n//\n//  Service for showing modal dialogs.\n\n/***** JSLint Config *****/\n/*global angular  */\n(function() {\n\n  'use strict';\n\n  var module = angular.module('angularModalService', []);\n\n  module.factory('ModalService', ['$document', '$compile', '$controller', '$http', '$rootScope', '$q', '$templateRequest',\n    function($document, $compile, $controller, $http, $rootScope, $q, $templateRequest) {\n\n    //  Get the body of the document, we'll add the modal to this.\n    var body = $document.find('body');\n\n    function ModalService() {\n\n      var self = this;\n\n      //  Returns a promise which gets the template, either\n      //  from the template parameter or via a request to the\n      //  template url parameter.\n      var getTemplate = function(template, templateUrl) {\n        var deferred = $q.defer();\n        if(template) {\n          deferred.resolve(template);\n        } else if(templateUrl) {\n          $templateRequest(templateUrl, true)\n            .then(function (template) {\n              deferred.resolve(template);\n            }, function (error) {\n              deferred.reject(error);\n            });\n        } else {\n          deferred.reject(\"No template or templateUrl has been specified.\");\n        }\n        return deferred.promise;\n      };\n\n      self.showModal = function(options) {\n\n        //  Create a deferred we'll resolve when the modal is ready.\n        var deferred = $q.defer();\n\n        //  Validate the input parameters.\n        var controllerName = options.controller;\n        if(!controllerName) {\n          deferred.reject(\"No controller has been specified.\");\n          return deferred.promise;\n        }\n\n        //  Get the actual html of the template.\n        getTemplate(options.template, options.templateUrl)\n          .then(function(template) {\n\n            //  Create a new scope for the modal.\n            var modalScope = $rootScope.$new();\n\n            //  Create the inputs object to the controller - this will include\n            //  the scope, as well as all inputs provided.\n            //  We will also create a deferred that is resolved with a provided\n            //  close function. The controller can then call 'close(result)'.\n            //  The controller can also provide a delay for closing - this is\n            //  helpful if there are closing animations which must finish first.\n            var closeDeferred = $q.defer();\n            var inputs = {\n              $scope: modalScope,\n              close: function(result, delay) {\n                if(delay === undefined || delay === null) delay = 0;\n                window.setTimeout(function() {\n                  //  Resolve the 'close' promise.\n                  closeDeferred.resolve(result);\n\n                  //  We can now clean up the scope and remove the element from the DOM.\n                  modalScope.$destroy();\n                  modalElement.remove();\n\n                  //  Unless we null out all of these objects we seem to suffer\n                  //  from memory leaks, if anyone can explain why then I'd\n                  //  be very interested to know.\n                  inputs.close = null;\n                  deferred = null;\n                  closeDeferred = null;\n                  modal = null;\n                  inputs = null;\n                  modalElement = null;\n                  modalScope = null;\n                }, delay);\n              }\n            };\n\n            //  If we have provided any inputs, pass them to the controller.\n            if(options.inputs) angular.extend(inputs, options.inputs);\n\n            //  Compile then link the template element, building the actual element.\n            //  Set the $element on the inputs so that it can be injected if required.\n            var linkFn = $compile(template);\n            var modalElement = linkFn(modalScope);\n            inputs.$element = modalElement;\n\n            //  Create the controller, explicitly specifying the scope to use.\n            var modalController = $controller(options.controller, inputs);\n\n            if(options.controllerAs){\n              modalScope[options.controllerAs] = modalController ;\n            }\n            //  Finally, append the modal to the dom.\n            if (options.appendElement) {\n              // append to custom append element\n              options.appendElement.append(modalElement);\n            } else {\n              // append to body when no custom append element is specified\n              body.append(modalElement);\n            }\n\n            //  We now have a modal object...\n            var modal = {\n              controller: modalController,\n              scope: modalScope,\n              element: modalElement,\n              close: closeDeferred.promise\n            };\n\n            //  ...which is passed to the caller via the promise.\n            deferred.resolve(modal);\n\n          })\n          .then(null, function(error) { // 'catch' doesn't work in IE8.\n            deferred.reject(error);\n          });\n\n        return deferred.promise;\n      };\n\n    }\n\n    return new ModalService();\n  }]);\n\n}());\n"],"sourceRoot":"/source/"}